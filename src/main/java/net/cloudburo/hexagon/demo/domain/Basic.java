/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.cloudburo.hexagon.demo.domain;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Basic extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7031364076078335036L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Basic\",\"namespace\":\"net.cloudburo.hexagon.demo.domain\",\"fields\":[{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique user defined name of User in a System\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User email address\"},{\"name\":\"subscribed\",\"type\":\"boolean\",\"doc\":\"A property which defines whether User has a newsletter subscription\",\"default\":true},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ISO Country Code 3166-1 alpha-3: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\",\"default\":\"XXX\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Basic> ENCODER =
      new BinaryMessageEncoder<Basic>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Basic> DECODER =
      new BinaryMessageDecoder<Basic>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Basic> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Basic> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Basic>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Basic to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Basic from a ByteBuffer. */
  public static Basic fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique user defined name of User in a System */
   private java.lang.String username;
  /** User email address */
   private java.lang.String email;
  /** A property which defines whether User has a newsletter subscription */
   private boolean subscribed;
  /** ISO Country Code 3166-1 alpha-3: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3 */
   private java.lang.String country;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Basic() {}

  /**
   * All-args constructor.
   * @param username Unique user defined name of User in a System
   * @param email User email address
   * @param subscribed A property which defines whether User has a newsletter subscription
   * @param country ISO Country Code 3166-1 alpha-3: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
   */
  public Basic(java.lang.String username, java.lang.String email, java.lang.Boolean subscribed, java.lang.String country) {
    this.username = username;
    this.email = email;
    this.subscribed = subscribed;
    this.country = country;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return username;
    case 1: return email;
    case 2: return subscribed;
    case 3: return country;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: username = (java.lang.String)value$; break;
    case 1: email = (java.lang.String)value$; break;
    case 2: subscribed = (java.lang.Boolean)value$; break;
    case 3: country = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'username' field.
   * @return Unique user defined name of User in a System
   */
  public java.lang.String getUsername() {
    return username;
  }


  /**
   * Gets the value of the 'email' field.
   * @return User email address
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Gets the value of the 'subscribed' field.
   * @return A property which defines whether User has a newsletter subscription
   */
  public java.lang.Boolean getSubscribed() {
    return subscribed;
  }


  /**
   * Gets the value of the 'country' field.
   * @return ISO Country Code 3166-1 alpha-3: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
   */
  public java.lang.String getCountry() {
    return country;
  }


  /**
   * Creates a new Basic RecordBuilder.
   * @return A new Basic RecordBuilder
   */
  public static net.cloudburo.hexagon.demo.domain.Basic.Builder newBuilder() {
    return new net.cloudburo.hexagon.demo.domain.Basic.Builder();
  }

  /**
   * Creates a new Basic RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Basic RecordBuilder
   */
  public static net.cloudburo.hexagon.demo.domain.Basic.Builder newBuilder(net.cloudburo.hexagon.demo.domain.Basic.Builder other) {
    return new net.cloudburo.hexagon.demo.domain.Basic.Builder(other);
  }

  /**
   * Creates a new Basic RecordBuilder by copying an existing Basic instance.
   * @param other The existing instance to copy.
   * @return A new Basic RecordBuilder
   */
  public static net.cloudburo.hexagon.demo.domain.Basic.Builder newBuilder(net.cloudburo.hexagon.demo.domain.Basic other) {
    return new net.cloudburo.hexagon.demo.domain.Basic.Builder(other);
  }

  /**
   * RecordBuilder for Basic instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Basic>
    implements org.apache.avro.data.RecordBuilder<Basic> {

    /** Unique user defined name of User in a System */
    private java.lang.String username;
    /** User email address */
    private java.lang.String email;
    /** A property which defines whether User has a newsletter subscription */
    private boolean subscribed;
    /** ISO Country Code 3166-1 alpha-3: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3 */
    private java.lang.String country;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.cloudburo.hexagon.demo.domain.Basic.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subscribed)) {
        this.subscribed = data().deepCopy(fields()[2].schema(), other.subscribed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.country)) {
        this.country = data().deepCopy(fields()[3].schema(), other.country);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Basic instance
     * @param other The existing instance to copy.
     */
    private Builder(net.cloudburo.hexagon.demo.domain.Basic other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subscribed)) {
        this.subscribed = data().deepCopy(fields()[2].schema(), other.subscribed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.country)) {
        this.country = data().deepCopy(fields()[3].schema(), other.country);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'username' field.
      * Unique user defined name of User in a System
      * @return The value.
      */
    public java.lang.String getUsername() {
      return username;
    }

    /**
      * Sets the value of the 'username' field.
      * Unique user defined name of User in a System
      * @param value The value of 'username'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Basic.Builder setUsername(java.lang.String value) {
      validate(fields()[0], value);
      this.username = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * Unique user defined name of User in a System
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'username' field.
      * Unique user defined name of User in a System
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Basic.Builder clearUsername() {
      username = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * User email address
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * User email address
      * @param value The value of 'email'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Basic.Builder setEmail(java.lang.String value) {
      validate(fields()[1], value);
      this.email = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * User email address
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'email' field.
      * User email address
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Basic.Builder clearEmail() {
      email = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'subscribed' field.
      * A property which defines whether User has a newsletter subscription
      * @return The value.
      */
    public java.lang.Boolean getSubscribed() {
      return subscribed;
    }

    /**
      * Sets the value of the 'subscribed' field.
      * A property which defines whether User has a newsletter subscription
      * @param value The value of 'subscribed'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Basic.Builder setSubscribed(boolean value) {
      validate(fields()[2], value);
      this.subscribed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'subscribed' field has been set.
      * A property which defines whether User has a newsletter subscription
      * @return True if the 'subscribed' field has been set, false otherwise.
      */
    public boolean hasSubscribed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'subscribed' field.
      * A property which defines whether User has a newsletter subscription
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Basic.Builder clearSubscribed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * ISO Country Code 3166-1 alpha-3: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * ISO Country Code 3166-1 alpha-3: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
      * @param value The value of 'country'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Basic.Builder setCountry(java.lang.String value) {
      validate(fields()[3], value);
      this.country = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * ISO Country Code 3166-1 alpha-3: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'country' field.
      * ISO Country Code 3166-1 alpha-3: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Basic.Builder clearCountry() {
      country = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Basic build() {
      try {
        Basic record = new Basic();
        record.username = fieldSetFlags()[0] ? this.username : (java.lang.String) defaultValue(fields()[0]);
        record.email = fieldSetFlags()[1] ? this.email : (java.lang.String) defaultValue(fields()[1]);
        record.subscribed = fieldSetFlags()[2] ? this.subscribed : (java.lang.Boolean) defaultValue(fields()[2]);
        record.country = fieldSetFlags()[3] ? this.country : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Basic>
    WRITER$ = (org.apache.avro.io.DatumWriter<Basic>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Basic>
    READER$ = (org.apache.avro.io.DatumReader<Basic>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
