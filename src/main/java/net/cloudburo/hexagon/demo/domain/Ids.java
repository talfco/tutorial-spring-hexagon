/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.cloudburo.hexagon.demo.domain;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Ids extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2441445727668729977L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Ids\",\"namespace\":\"net.cloudburo.hexagon.demo.domain\",\"fields\":[{\"name\":\"uid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Mandatory:The unique identifier of this user record, i.e. ElasticSearch document UID. Null for the creation of a new record\"},{\"name\":\"domain\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Mandatory: The Identifier Domain\"},{\"name\":\"altKeys\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Key\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"domain\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Ids> ENCODER =
      new BinaryMessageEncoder<Ids>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Ids> DECODER =
      new BinaryMessageDecoder<Ids>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Ids> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Ids> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Ids>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Ids to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Ids from a ByteBuffer. */
  public static Ids fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Mandatory:The unique identifier of this user record, i.e. ElasticSearch document UID. Null for the creation of a new record */
   private java.lang.String uid;
  /** Mandatory: The Identifier Domain */
   private java.lang.String domain;
   private java.util.List<net.cloudburo.hexagon.demo.domain.Key> altKeys;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Ids() {}

  /**
   * All-args constructor.
   * @param uid Mandatory:The unique identifier of this user record, i.e. ElasticSearch document UID. Null for the creation of a new record
   * @param domain Mandatory: The Identifier Domain
   * @param altKeys The new value for altKeys
   */
  public Ids(java.lang.String uid, java.lang.String domain, java.util.List<net.cloudburo.hexagon.demo.domain.Key> altKeys) {
    this.uid = uid;
    this.domain = domain;
    this.altKeys = altKeys;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uid;
    case 1: return domain;
    case 2: return altKeys;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uid = (java.lang.String)value$; break;
    case 1: domain = (java.lang.String)value$; break;
    case 2: altKeys = (java.util.List<net.cloudburo.hexagon.demo.domain.Key>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uid' field.
   * @return Mandatory:The unique identifier of this user record, i.e. ElasticSearch document UID. Null for the creation of a new record
   */
  public java.lang.String getUid() {
    return uid;
  }


  /**
   * Gets the value of the 'domain' field.
   * @return Mandatory: The Identifier Domain
   */
  public java.lang.String getDomain() {
    return domain;
  }


  /**
   * Gets the value of the 'altKeys' field.
   * @return The value of the 'altKeys' field.
   */
  public java.util.List<net.cloudburo.hexagon.demo.domain.Key> getAltKeys() {
    return altKeys;
  }


  /**
   * Creates a new Ids RecordBuilder.
   * @return A new Ids RecordBuilder
   */
  public static net.cloudburo.hexagon.demo.domain.Ids.Builder newBuilder() {
    return new net.cloudburo.hexagon.demo.domain.Ids.Builder();
  }

  /**
   * Creates a new Ids RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Ids RecordBuilder
   */
  public static net.cloudburo.hexagon.demo.domain.Ids.Builder newBuilder(net.cloudburo.hexagon.demo.domain.Ids.Builder other) {
    return new net.cloudburo.hexagon.demo.domain.Ids.Builder(other);
  }

  /**
   * Creates a new Ids RecordBuilder by copying an existing Ids instance.
   * @param other The existing instance to copy.
   * @return A new Ids RecordBuilder
   */
  public static net.cloudburo.hexagon.demo.domain.Ids.Builder newBuilder(net.cloudburo.hexagon.demo.domain.Ids other) {
    return new net.cloudburo.hexagon.demo.domain.Ids.Builder(other);
  }

  /**
   * RecordBuilder for Ids instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Ids>
    implements org.apache.avro.data.RecordBuilder<Ids> {

    /** Mandatory:The unique identifier of this user record, i.e. ElasticSearch document UID. Null for the creation of a new record */
    private java.lang.String uid;
    /** Mandatory: The Identifier Domain */
    private java.lang.String domain;
    private java.util.List<net.cloudburo.hexagon.demo.domain.Key> altKeys;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.cloudburo.hexagon.demo.domain.Ids.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.altKeys)) {
        this.altKeys = data().deepCopy(fields()[2].schema(), other.altKeys);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Ids instance
     * @param other The existing instance to copy.
     */
    private Builder(net.cloudburo.hexagon.demo.domain.Ids other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.altKeys)) {
        this.altKeys = data().deepCopy(fields()[2].schema(), other.altKeys);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'uid' field.
      * Mandatory:The unique identifier of this user record, i.e. ElasticSearch document UID. Null for the creation of a new record
      * @return The value.
      */
    public java.lang.String getUid() {
      return uid;
    }

    /**
      * Sets the value of the 'uid' field.
      * Mandatory:The unique identifier of this user record, i.e. ElasticSearch document UID. Null for the creation of a new record
      * @param value The value of 'uid'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Ids.Builder setUid(java.lang.String value) {
      validate(fields()[0], value);
      this.uid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uid' field has been set.
      * Mandatory:The unique identifier of this user record, i.e. ElasticSearch document UID. Null for the creation of a new record
      * @return True if the 'uid' field has been set, false otherwise.
      */
    public boolean hasUid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uid' field.
      * Mandatory:The unique identifier of this user record, i.e. ElasticSearch document UID. Null for the creation of a new record
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Ids.Builder clearUid() {
      uid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'domain' field.
      * Mandatory: The Identifier Domain
      * @return The value.
      */
    public java.lang.String getDomain() {
      return domain;
    }

    /**
      * Sets the value of the 'domain' field.
      * Mandatory: The Identifier Domain
      * @param value The value of 'domain'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Ids.Builder setDomain(java.lang.String value) {
      validate(fields()[1], value);
      this.domain = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'domain' field has been set.
      * Mandatory: The Identifier Domain
      * @return True if the 'domain' field has been set, false otherwise.
      */
    public boolean hasDomain() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'domain' field.
      * Mandatory: The Identifier Domain
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Ids.Builder clearDomain() {
      domain = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'altKeys' field.
      * @return The value.
      */
    public java.util.List<net.cloudburo.hexagon.demo.domain.Key> getAltKeys() {
      return altKeys;
    }

    /**
      * Sets the value of the 'altKeys' field.
      * @param value The value of 'altKeys'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Ids.Builder setAltKeys(java.util.List<net.cloudburo.hexagon.demo.domain.Key> value) {
      validate(fields()[2], value);
      this.altKeys = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'altKeys' field has been set.
      * @return True if the 'altKeys' field has been set, false otherwise.
      */
    public boolean hasAltKeys() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'altKeys' field.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.Ids.Builder clearAltKeys() {
      altKeys = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Ids build() {
      try {
        Ids record = new Ids();
        record.uid = fieldSetFlags()[0] ? this.uid : (java.lang.String) defaultValue(fields()[0]);
        record.domain = fieldSetFlags()[1] ? this.domain : (java.lang.String) defaultValue(fields()[1]);
        record.altKeys = fieldSetFlags()[2] ? this.altKeys : (java.util.List<net.cloudburo.hexagon.demo.domain.Key>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Ids>
    WRITER$ = (org.apache.avro.io.DatumWriter<Ids>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Ids>
    READER$ = (org.apache.avro.io.DatumReader<Ids>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
