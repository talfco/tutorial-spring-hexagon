/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.cloudburo.hexagon.demo.domain;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Information which used to describe basic user data */
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3633840218683860236L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"net.cloudburo.hexagon.demo.domain\",\"doc\":\"Information which used to describe basic user data\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"doc\":\"The header record stores important (meta-) information about the record, certain fields are optional in case an initial creation is done\",\"fields\":[{\"name\":\"avroFingerprint\",\"type\":\"long\",\"doc\":\"Mandatory: The fingerprint of the schema used by record producer, http://avro.apache.org/docs/1.8.2/spec.html#schema_fingerprints.\"},{\"name\":\"lastUpdateLoginId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Mandatory: Login id  who produced the record\"},{\"name\":\"lastUpdateTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Optional: The Update timestamp when the record was persisted. Null for the update of a record, will be newly calculated by persistency adpapter\",\"default\":null,\"logical-type\":\"time-micros\"}]}},{\"name\":\"ids\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Ids\",\"fields\":[{\"name\":\"uid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Mandatory:The unique identifier of this user record, i.e. ElasticSearch document UID. Null for the creation of a new record\"},{\"name\":\"domain\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Mandatory: The Identifier Domain\"},{\"name\":\"altKeys\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Key\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"domain\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}],\"default\":null}]}],\"doc\":\"Optional: Id section is only available after creation of a User record\",\"default\":null},{\"name\":\"basic\",\"type\":{\"type\":\"record\",\"name\":\"Basic\",\"fields\":[{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique user defined name of User in a System\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User email address\"},{\"name\":\"subscribed\",\"type\":\"boolean\",\"doc\":\"A property which defines whether User has a newsletter subscription\",\"default\":true},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ISO Country Code 3166-1 alpha-3: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\",\"default\":\"XXX\"}]}},{\"name\":\"profile\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Profile\",\"doc\":\"record covers the data part of the overview tab\",\"fields\":[{\"name\":\"businessActivities\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Activity\",\"fields\":[{\"name\":\"descr\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"textual natural language description - maximal 255 characters\"}]}}},{\"name\":\"coreCompetencies\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Competency\",\"fields\":[{\"name\":\"descr\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"textual natural language description - maximal 255 characters\"}]}}},{\"name\":\"corporateObjectives\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Objective\",\"fields\":[{\"name\":\"string\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"textual natural language description - maximal 255 characters\"}]}}},{\"name\":\"sustainabilities\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Sustainability\",\"fields\":[{\"name\":\"string\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"textual natural language description - maximal 255 characters\"}]}}}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<User> ENCODER =
      new BinaryMessageEncoder<User>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<User> DECODER =
      new BinaryMessageDecoder<User>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<User> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<User>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this User to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a User from a ByteBuffer. */
  public static User fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private net.cloudburo.hexagon.demo.domain.Header header;
  /** Optional: Id section is only available after creation of a User record */
   private net.cloudburo.hexagon.demo.domain.Ids ids;
   private net.cloudburo.hexagon.demo.domain.Basic basic;
   private net.cloudburo.hexagon.demo.domain.Profile profile;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param ids Optional: Id section is only available after creation of a User record
   * @param basic The new value for basic
   * @param profile The new value for profile
   */
  public User(net.cloudburo.hexagon.demo.domain.Header header, net.cloudburo.hexagon.demo.domain.Ids ids, net.cloudburo.hexagon.demo.domain.Basic basic, net.cloudburo.hexagon.demo.domain.Profile profile) {
    this.header = header;
    this.ids = ids;
    this.basic = basic;
    this.profile = profile;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return ids;
    case 2: return basic;
    case 3: return profile;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (net.cloudburo.hexagon.demo.domain.Header)value$; break;
    case 1: ids = (net.cloudburo.hexagon.demo.domain.Ids)value$; break;
    case 2: basic = (net.cloudburo.hexagon.demo.domain.Basic)value$; break;
    case 3: profile = (net.cloudburo.hexagon.demo.domain.Profile)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public net.cloudburo.hexagon.demo.domain.Header getHeader() {
    return header;
  }


  /**
   * Gets the value of the 'ids' field.
   * @return Optional: Id section is only available after creation of a User record
   */
  public net.cloudburo.hexagon.demo.domain.Ids getIds() {
    return ids;
  }


  /**
   * Gets the value of the 'basic' field.
   * @return The value of the 'basic' field.
   */
  public net.cloudburo.hexagon.demo.domain.Basic getBasic() {
    return basic;
  }


  /**
   * Gets the value of the 'profile' field.
   * @return The value of the 'profile' field.
   */
  public net.cloudburo.hexagon.demo.domain.Profile getProfile() {
    return profile;
  }


  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static net.cloudburo.hexagon.demo.domain.User.Builder newBuilder() {
    return new net.cloudburo.hexagon.demo.domain.User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static net.cloudburo.hexagon.demo.domain.User.Builder newBuilder(net.cloudburo.hexagon.demo.domain.User.Builder other) {
    return new net.cloudburo.hexagon.demo.domain.User.Builder(other);
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static net.cloudburo.hexagon.demo.domain.User.Builder newBuilder(net.cloudburo.hexagon.demo.domain.User other) {
    return new net.cloudburo.hexagon.demo.domain.User.Builder(other);
  }

  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private net.cloudburo.hexagon.demo.domain.Header header;
    private net.cloudburo.hexagon.demo.domain.Header.Builder headerBuilder;
    /** Optional: Id section is only available after creation of a User record */
    private net.cloudburo.hexagon.demo.domain.Ids ids;
    private net.cloudburo.hexagon.demo.domain.Ids.Builder idsBuilder;
    private net.cloudburo.hexagon.demo.domain.Basic basic;
    private net.cloudburo.hexagon.demo.domain.Basic.Builder basicBuilder;
    private net.cloudburo.hexagon.demo.domain.Profile profile;
    private net.cloudburo.hexagon.demo.domain.Profile.Builder profileBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.cloudburo.hexagon.demo.domain.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = net.cloudburo.hexagon.demo.domain.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.ids)) {
        this.ids = data().deepCopy(fields()[1].schema(), other.ids);
        fieldSetFlags()[1] = true;
      }
      if (other.hasIdsBuilder()) {
        this.idsBuilder = net.cloudburo.hexagon.demo.domain.Ids.newBuilder(other.getIdsBuilder());
      }
      if (isValidValue(fields()[2], other.basic)) {
        this.basic = data().deepCopy(fields()[2].schema(), other.basic);
        fieldSetFlags()[2] = true;
      }
      if (other.hasBasicBuilder()) {
        this.basicBuilder = net.cloudburo.hexagon.demo.domain.Basic.newBuilder(other.getBasicBuilder());
      }
      if (isValidValue(fields()[3], other.profile)) {
        this.profile = data().deepCopy(fields()[3].schema(), other.profile);
        fieldSetFlags()[3] = true;
      }
      if (other.hasProfileBuilder()) {
        this.profileBuilder = net.cloudburo.hexagon.demo.domain.Profile.newBuilder(other.getProfileBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(net.cloudburo.hexagon.demo.domain.User other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.ids)) {
        this.ids = data().deepCopy(fields()[1].schema(), other.ids);
        fieldSetFlags()[1] = true;
      }
      this.idsBuilder = null;
      if (isValidValue(fields()[2], other.basic)) {
        this.basic = data().deepCopy(fields()[2].schema(), other.basic);
        fieldSetFlags()[2] = true;
      }
      this.basicBuilder = null;
      if (isValidValue(fields()[3], other.profile)) {
        this.profile = data().deepCopy(fields()[3].schema(), other.profile);
        fieldSetFlags()[3] = true;
      }
      this.profileBuilder = null;
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public net.cloudburo.hexagon.demo.domain.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.User.Builder setHeader(net.cloudburo.hexagon.demo.domain.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.cloudburo.hexagon.demo.domain.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(net.cloudburo.hexagon.demo.domain.Header.newBuilder(header));
        } else {
          setHeaderBuilder(net.cloudburo.hexagon.demo.domain.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.cloudburo.hexagon.demo.domain.User.Builder setHeaderBuilder(net.cloudburo.hexagon.demo.domain.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.User.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ids' field.
      * Optional: Id section is only available after creation of a User record
      * @return The value.
      */
    public net.cloudburo.hexagon.demo.domain.Ids getIds() {
      return ids;
    }

    /**
      * Sets the value of the 'ids' field.
      * Optional: Id section is only available after creation of a User record
      * @param value The value of 'ids'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.User.Builder setIds(net.cloudburo.hexagon.demo.domain.Ids value) {
      validate(fields()[1], value);
      this.idsBuilder = null;
      this.ids = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ids' field has been set.
      * Optional: Id section is only available after creation of a User record
      * @return True if the 'ids' field has been set, false otherwise.
      */
    public boolean hasIds() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'ids' field and creates one if it doesn't exist yet.
     * Optional: Id section is only available after creation of a User record
     * @return This builder.
     */
    public net.cloudburo.hexagon.demo.domain.Ids.Builder getIdsBuilder() {
      if (idsBuilder == null) {
        if (hasIds()) {
          setIdsBuilder(net.cloudburo.hexagon.demo.domain.Ids.newBuilder(ids));
        } else {
          setIdsBuilder(net.cloudburo.hexagon.demo.domain.Ids.newBuilder());
        }
      }
      return idsBuilder;
    }

    /**
     * Sets the Builder instance for the 'ids' field
     * Optional: Id section is only available after creation of a User record
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.cloudburo.hexagon.demo.domain.User.Builder setIdsBuilder(net.cloudburo.hexagon.demo.domain.Ids.Builder value) {
      clearIds();
      idsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ids' field has an active Builder instance
     * Optional: Id section is only available after creation of a User record
     * @return True if the 'ids' field has an active Builder instance
     */
    public boolean hasIdsBuilder() {
      return idsBuilder != null;
    }

    /**
      * Clears the value of the 'ids' field.
      * Optional: Id section is only available after creation of a User record
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.User.Builder clearIds() {
      ids = null;
      idsBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'basic' field.
      * @return The value.
      */
    public net.cloudburo.hexagon.demo.domain.Basic getBasic() {
      return basic;
    }

    /**
      * Sets the value of the 'basic' field.
      * @param value The value of 'basic'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.User.Builder setBasic(net.cloudburo.hexagon.demo.domain.Basic value) {
      validate(fields()[2], value);
      this.basicBuilder = null;
      this.basic = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'basic' field has been set.
      * @return True if the 'basic' field has been set, false otherwise.
      */
    public boolean hasBasic() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'basic' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.cloudburo.hexagon.demo.domain.Basic.Builder getBasicBuilder() {
      if (basicBuilder == null) {
        if (hasBasic()) {
          setBasicBuilder(net.cloudburo.hexagon.demo.domain.Basic.newBuilder(basic));
        } else {
          setBasicBuilder(net.cloudburo.hexagon.demo.domain.Basic.newBuilder());
        }
      }
      return basicBuilder;
    }

    /**
     * Sets the Builder instance for the 'basic' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.cloudburo.hexagon.demo.domain.User.Builder setBasicBuilder(net.cloudburo.hexagon.demo.domain.Basic.Builder value) {
      clearBasic();
      basicBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'basic' field has an active Builder instance
     * @return True if the 'basic' field has an active Builder instance
     */
    public boolean hasBasicBuilder() {
      return basicBuilder != null;
    }

    /**
      * Clears the value of the 'basic' field.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.User.Builder clearBasic() {
      basic = null;
      basicBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'profile' field.
      * @return The value.
      */
    public net.cloudburo.hexagon.demo.domain.Profile getProfile() {
      return profile;
    }

    /**
      * Sets the value of the 'profile' field.
      * @param value The value of 'profile'.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.User.Builder setProfile(net.cloudburo.hexagon.demo.domain.Profile value) {
      validate(fields()[3], value);
      this.profileBuilder = null;
      this.profile = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'profile' field has been set.
      * @return True if the 'profile' field has been set, false otherwise.
      */
    public boolean hasProfile() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'profile' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.cloudburo.hexagon.demo.domain.Profile.Builder getProfileBuilder() {
      if (profileBuilder == null) {
        if (hasProfile()) {
          setProfileBuilder(net.cloudburo.hexagon.demo.domain.Profile.newBuilder(profile));
        } else {
          setProfileBuilder(net.cloudburo.hexagon.demo.domain.Profile.newBuilder());
        }
      }
      return profileBuilder;
    }

    /**
     * Sets the Builder instance for the 'profile' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.cloudburo.hexagon.demo.domain.User.Builder setProfileBuilder(net.cloudburo.hexagon.demo.domain.Profile.Builder value) {
      clearProfile();
      profileBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'profile' field has an active Builder instance
     * @return True if the 'profile' field has an active Builder instance
     */
    public boolean hasProfileBuilder() {
      return profileBuilder != null;
    }

    /**
      * Clears the value of the 'profile' field.
      * @return This builder.
      */
    public net.cloudburo.hexagon.demo.domain.User.Builder clearProfile() {
      profile = null;
      profileBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public User build() {
      try {
        User record = new User();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (net.cloudburo.hexagon.demo.domain.Header) defaultValue(fields()[0]);
        }
        if (idsBuilder != null) {
          record.ids = this.idsBuilder.build();
        } else {
          record.ids = fieldSetFlags()[1] ? this.ids : (net.cloudburo.hexagon.demo.domain.Ids) defaultValue(fields()[1]);
        }
        if (basicBuilder != null) {
          record.basic = this.basicBuilder.build();
        } else {
          record.basic = fieldSetFlags()[2] ? this.basic : (net.cloudburo.hexagon.demo.domain.Basic) defaultValue(fields()[2]);
        }
        if (profileBuilder != null) {
          record.profile = this.profileBuilder.build();
        } else {
          record.profile = fieldSetFlags()[3] ? this.profile : (net.cloudburo.hexagon.demo.domain.Profile) defaultValue(fields()[3]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<User>
    WRITER$ = (org.apache.avro.io.DatumWriter<User>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<User>
    READER$ = (org.apache.avro.io.DatumReader<User>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
